{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"","slug":"Alibaba Java 编程规约","date":"2018-07-23T16:18:23.391Z","updated":"2018-07-24T16:21:25.368Z","comments":true,"path":"2018/07/24/Alibaba Java 编程规约/","link":"","permalink":"http://yoursite.com/2018/07/24/Alibaba Java 编程规约/","excerpt":"","text":"Alibaba Java开发规约一、编程规范（一）命名风格 【强制】抽象类命名使用Abstract或Base开头；异常类命名使用Exception结尾；测试类命名以它要测试的类的名称开始，以Test结尾。 【强制】POJO类中布尔类型的变量，都不要加is，否则部分框架解析会引起序列化错误。 反例：定义为基本数据类型Boolean isDeleted；的属性，它的方法也是isDeleted()，RPC框架在反向解析的时候，“以为”对应的属性名称是deleted，导致属性获取不到，进而抛出异常。 包名统一使用单数形式，类名可以使用复试形式 在接口类中方法和属性无需修饰符，并加上javadoc注释；尽量不要在接口中定义变量 说明：JDK8中接口允许有默认实现，那么这个default方法，是对所有实现类都有价值的默认实现。 【参考】各层命名规约：A) Service/DAO层方法命名规约 1） 获取单个对象的方法用get做前缀。 2） 获取多个对象的方法用list做前缀。 3） 获取统计值的方法用count做前缀。 4） 插入的方法用save/insert做前缀。 5） 删除的方法用remove/delete做前缀。 6） 修改的方法用update做前缀。B) 领域模型命名规约 1） 数据对象：xxxDO，xxx即为数据表名。 2） 数据传输对象：xxxDTO，xxx为业务领域相关的名称。 3） 展示对象：xxxVO，xxx一般为网页名称。 4） POJO是DO/DTO/BO/VO的统称，禁止命名成xxxPOJO。 (四) OOP规约 【强制】避免通过一个类的对象引用访问此类的静态变量或静态方法，无谓增加编译器解析成 本，直接用类名来访问即可 【强制】相同参数类型，相同业务含义，才可以使用 Java 的可变参数，避免使用 Object。 说明：可变参数必须放置在参数列表的最后。（提倡同学们尽量不用可变参数编程） 正例：public User getUsers(String type, Integer… ids) {…} 注：我不用可变参数编程，因为我不会啊~ 使用常量调用equals方法 不使用过时的方法 【强制】所有的相同类型的包装类对象之间值的比较，全部使用 equals 方法比较。 说明：对于 Integer var = ? 在-128 至 127 范围内的赋值，Integer 对象是在IntegerCache.cache 产生，会复用已有对象，这个区间内的 Integer 值可以直接使用==进行 判断，但是这个区间之外的所有数据，都会在堆上产生，并不会复用已有对象，这是一个大坑， 推荐使用 equals 方法进行判断。 所有的POJO类必须使用包装数据类型 定义DO/DTO/VO类时，不需要设定任何属性的默认值。 【强制】序列化类新增属性时，请不要修改 serialVersionUID 字段，避免反序列失败；如 果完全不兼容升级，避免反序列化混乱，那么请修改 serialVersionUID 值。 构造方法里面的业务逻辑写在init里面 pojo需要写tostring方法 【推荐】 类内方法定义顺序依次是：公有方法或保护方法 &gt; 私有方法 &gt; getter/setter 方法。 【推荐】循环体内，字符串的连接方式，使用 StringBuilder 的 append 方法进行扩展。","categories":[],"tags":[]},{"title":"","slug":"上班第三天","date":"2018-07-05T15:42:58.929Z","updated":"2018-07-05T15:42:59.061Z","comments":true,"path":"2018/07/05/上班第三天/","link":"","permalink":"http://yoursite.com/2018/07/05/上班第三天/","excerpt":"","text":"上班第三天1.上午培训入职以来，破冰环节都介绍了三次了，几乎是每天一次，但是体验还是很好的，毕竟同事之间都年龄相近，大家都很有活力，很青春，所以我觉得我来对了地方，也觉得自己很幸运。在今后的日子里呢，自己要努力学习新技术，适应自己的工作，让自己尽快的成为“大佬”。 2.装电脑等装电脑倒是等了好久。 3. 看公司的培训教程哇，看教程倒是眼花缭乱，各种各样乱七八糟的技术听都没听说过，所以还要补好多东西哦。 4.今天就到这吧，我只是想玩一下我的新博客~晚安危险的事固然美丽 不如看她骑马归来","categories":[],"tags":[]},{"title":"getHexo","slug":"getHexo","date":"2018-07-04T15:49:58.000Z","updated":"2018-07-04T15:49:58.505Z","comments":true,"path":"2018/07/04/getHexo/","link":"","permalink":"http://yoursite.com/2018/07/04/getHexo/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-07-04T14:19:49.568Z","updated":"2018-07-03T13:59:17.964Z","comments":true,"path":"2018/07/04/hello-world/","link":"","permalink":"http://yoursite.com/2018/07/04/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}